---
import { z } from 'zod';
import { postSchema } from '../schemas';
import 'node_modules/normalize.css/normalize.css';
import '@styles/global.scss';
import '@fontsource-variable/rubik';
import BaseHead from '@components/BaseHead.astro';
import CategoryNavigation from '@components/navigation/Categories.astro';
import SlugNavigation from '@components/navigation/Slugs.astro';
import Footer from '@components/Footer.astro';
import getNumberComma from '../helpers/getNumberComma';

// type Params = { categories: (typeof categories)[number]['name'] };
// type Params = InferGetStaticParamsType<typeof getStaticPaths>;
// const { categories: categorySlug } = Astro.params;

const postLayoutProps = postSchema
  .pick({
    title: true,
    description: true,
    price: true,
    category: true,
    acquired: true,
    made: true,
    tags: true,
    _updatedAt: true,
    _createdAt: true
  })
  .transform(({ _updatedAt, _createdAt, ...rest }) => ({
    // categoryTitle: category.title,
    dateModified: _updatedAt,
    datePublished: _createdAt,
    ...rest
  }));

type PostProps = z.infer<typeof postLayoutProps>;

const {
  title,
  description,
  price,
  category,
  acquired,
  made,
  tags,
  dateModified,
  datePublished
} = Astro.props as PostProps;

const currencyId = {
  twd: { flag: 'üáπüáº', symbol: '$' },
  jpy: { flag: 'üáØüáµ', symbol: '¬•' },
  usd: { flag: 'üá∫üá∏', symbol: '$' }
};

const pageTitle = `${title} (${category.title})`;
---

<!doctype html>
<html lang="zh-TW">
  <head>
    <BaseHead
      title={pageTitle}
      description={description}
      dateModified={dateModified}
      datePublished={datePublished}
    />
  </head>
  <body class="home">
    <header>
      <CategoryNavigation />
    </header>
    <main>
      <div class="mainLayout">
        <SlugNavigation categorySlug={category.slug.current} />
        <div class="content">
          <article class="container">
            <slot />
          </article>
          {
            !!tags && tags.length > 0 && (
              <>
                <hr class="divider" />
                <ul class="tags container">
                  {tags.map(({ title }) => (
                    <li class="tagItem">{title}</li>
                  ))}
                </ul>
              </>
            )
          }
           <hr class="divider" />
          {
            !!price?.amount && (
              <div class="info container">
                {`${!!price.about ? 'Â§ßÁ¥Ñ ' : ''}${
                  currencyId[price.currency.name].flag
                } ${currencyId[price.currency.name].symbol} ${getNumberComma(
                  price.amount
                )}`}
              </div>
            )
          }
          <div class="info container">
            {!!made ? `${made}Ë£ΩÈÄ†` : '‰∏çÁü•ÈÅìË£ΩÈÄ†Âú∞'}
          </div>
        </div>
      </div>
    </main>
    <Footer />
    <style lang="scss">
      .home {
        display: grid;
        grid: auto 1fr auto / 100vw;

        @media screen and (min-width: 992px) {
          grid:
            'header .' 1fr
            'header footer' auto / 160px 1fr;
        }
      }

      header {
        margin-block-end: 1.6rem;
        // padding-inline-start: 1.6rem;
        background-color: var(--colorShade96);

        @media screen and (min-width: 992px) {
          grid-area: header;
          margin-block-end: 0;
        }
      }

      main {
        padding-inline-start: 1.6rem;
        padding-inline-end: 1.6rem;

        @media screen and (min-width: 992px) {
          padding-inline-start: 0;
          padding-inline-end: 0;
        }
      }

      .mainLayout {
        display: grid;
        grid: auto auto / 100%;
        row-gap: 16px;

        @media screen and (min-width: 992px) {
          grid: auto / auto 1fr;
          height: 100%;
        }
      }

      .content {
        @media screen and (min-width: 992px) {
          max-height: calc(100vh - 94px);
          overflow-y: scroll;
        }
      }

      .container {
        max-width: 672px;
        margin-inline: auto;
      }

      article {
        margin-block-end: 2.4rem;

        @media screen and (min-width: 992px) {
          padding-block-start: 2rem;
          padding-inline: 1.6rem;
        }

        @media screen and (min-width: 1200px) {
          padding-inline: 0;
        }

        :global(h2) {
          margin-block: 0 0.8rem;
          font-size: clamp(2.7rem, 1.2vw + 1.8rem, 3rem);
        }

        :global(img) {
          max-width: 100%;
        }

        :global(p) {
          margin-block-start: 0;
          color: var(--colorShade25);
          font-size: clamp(1.8rem, 1.125vw + 1rem, 2.2rem);
          line-height: 1.5;
        }

        :global(ul) {
          margin-block: 0 1.6rem;
          padding-inline-start: 2rem;
        }

        :global(ul > li) {
          font-size: clamp(1.8rem, 1.125vw + 1rem, 2.2rem);
          line-height: 1.5;
          list-style-type: square;
        }
      }

      .divider {
        margin-block: 0 1.6rem;
        margin-inline: -1.6rem;
        border-top: 0;
        border-bottom: 1px solid var(--colorShade88);

        @media screen and (min-width: 992px) {
          margin-inline: 0;
        }
      }

      .tags {
        display: grid;
        grid: auto / auto-flow max-content;
        gap: 1.6rem;
        margin-block: 0 1.6rem;
        padding-inline: 0;

        @media screen and (min-width: 992px) {
          padding-inline: 1.6rem;
        }

        @media screen and (min-width: 1200px) {
          padding-inline: 0;
        }
      }

      .tagItem {
        list-style-type: none;
        font-size: 1.6rem;
      }

      .info {
        margin-block: 0 1.6rem;
        font-size: 1.6rem;

        @media screen and (min-width: 992px) {
          padding-inline: 1.6rem;
        }

        @media screen and (min-width: 1200px) {
          padding-inline: 0;
        }
      }
    </style>
  </body>
</html>
