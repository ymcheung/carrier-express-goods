---
import { categories } from '../../constants';
import 'node_modules/normalize.css/normalize.css';
import '@styles/global.scss';
import '@fontsource-variable/rubik';
import BaseHead from '@components/BaseHead.astro';
import CategoryNavigation from '@components/navigation/Categories.astro';
import SlugNavigation from '@components/navigation/Slugs.astro';
import Footer from '@components/Footer.astro';
import getNumberComma from '../helpers/getNumberComma';

interface Props {
  title: string;
  cover?: {
    src: string;
    width: number;
    height: number;
    format: string;
  };
  description: string;
  price: {
    currency: 'twd' | 'jpy' | 'usd';
    number?: number | 'ÂøòË®ò‰∫Ü'
    about?: boolean;
  };
  made?: string;
  tags?: string[];
  dateModified: string;
  datePublished: string;
}

type Params = { categories: (typeof categories)[number]['name'] };
const { categories: categoryName } = Astro.params as Params;

const {
  title,
  description,
  price: {
    currency,
    about: priceAbout,
    number: priceNumber = 'ÂøòË®ò‰∫Ü'
  },
  made,
  tags,
  dateModified,
  datePublished
} = Astro.props as Props;

const currencyId = {
  twd: { flag: 'üáπüáº', symbol: '$' },
  jpy: { flag: 'üáØüáµ', symbol: '¬•' },
  usd: { flag: 'üá∫üá∏', symbol: '$' }
};

const categoryLabel = categories.find(
  ({ name }) => name === categoryName
)?.label;

const pageTitle = `${title} (${categoryLabel})`;
---

<!doctype html>
<html lang='zh-TW'>
  <head>
    <BaseHead
      title={pageTitle}
      description={description}
      dateModified={dateModified}
      datePublished={datePublished}
    />
  </head>
  <body class='home'>
    <header>
      <CategoryNavigation />
    </header>
    <main>
      <div class='mainLayout'>
        <SlugNavigation categoryName={categoryName} transition:persist />
        <div class='content'>
          <article>
            <slot />
          </article>
          {
            !!tags && tags.length > 0 && (
              <ul class='tags'>
                {tags.map((tag) => (
                  <li class='tagItem'>{tag}</li>
                ))}
              </ul>
            )
          }
          <div class="info">
            {`${priceNumber === 'ÂøòË®ò‰∫Ü' ?
              'ÂøòË®ò‰∫Ü' :
              `${!!priceAbout ? 'Â§ßÁ¥Ñ ' : ''}${currencyId[currency].flag} ${currencyId[currency].symbol} ${getNumberComma(priceNumber)}`}`
            }
          </div>
          <div class="info">
          {
            !!made ?
              `${made}Ë£ΩÈÄ†` :
              '‰∏çÁü•ÈÅìË£ΩÈÄ†Âú∞'
          }
          </div>
        </div>
      </div>
    </main>
    <Footer />
    <style lang='scss'>
      .home {
        display: grid;
        grid: auto 1fr auto / 100vw;

        @media screen and (min-width: 992px) {
          grid:
            'header .' 1fr
            'header footer' auto / 160px 1fr;
        }
      }

      header {
        margin-block-end: 1.6rem;
        // padding-inline-start: 1.6rem;
        background-color: var(--colorShade96);

        @media screen and (min-width: 992px) {
          grid-area: header;
          margin-block-end: 0;
        }
      }

      main {
        padding-inline-start: 1.6rem;
        padding-inline-end: 1.6rem;

        @media screen and (min-width: 992px) {
          padding-inline-start: 0;
          padding-inline-end: 0;
        }
      }

      .mainLayout {
        display: grid;
        grid: auto auto / 100%;
        row-gap: 16px;

        @media screen and (min-width: 992px) {
          grid: auto / auto 1fr;
          height: 100%;
        }
      }

      .content {
        @media screen and (min-width: 992px) {
          max-height: calc(100vh - 94px);
          overflow-y: scroll;
        }
      }

      article {
        max-width: 672px;
        margin-inline: auto;
        margin-block-end: 2.4rem;

        @media screen and (min-width: 992px) {
          padding-block-start: 2.4rem;
          padding-inline: 1.6rem;
        }

        @media screen and (min-width: 1200px) {
          padding-inline: 0;
        }

        :global(h2) {
          margin-block: 0 1.6rem;
          font-size: clamp(2.7rem, 1.2vw + 1.8rem, 3rem);
        }

        :global(p) {
          margin-block-start: 0;
          color: var(--colorShade25);
          font-size: clamp(1.8rem, 1.125vw + 1rem, 2.2rem);
          line-height: 1.5;
        }

        :global(ul) {
          margin-block: 0 1.6rem;
          padding-inline-start: 1.6rem;
        }

        :global(ul > li) {
          font-size: clamp(1.8rem, 1.125vw + 1rem, 2.2rem);
          line-height: 1.5;
          list-style-type: square;
        }
      }

      .tags {
        display: grid;
        grid: auto / auto-flow max-content;
        gap: 1.6rem;
        max-width: 672px;
        margin-block: 0 1.6rem;
        margin-inline: auto;
        padding-inline: 0;

        @media screen and (min-width: 992px) {
          padding-inline: 1.6rem;
        }

        @media screen and (min-width: 1200px) {
          padding-inline: 0;
        }
      }

      .tagItem {
        list-style-type: none;
        font-size: 1.6rem;
      }

      .info {
        max-width: 672px;
        margin-block: 0 1.6rem;
        margin-inline: auto;
        font-size: 1.6rem;


        @media screen and (min-width: 992px) {
          padding-inline: 1.6rem;
        }


        @media screen and (min-width: 1200px) {
          padding-inline: 0;
        }
      }

    </style>
  </body>
</html>
