---
import { z } from 'zod';
import { postSchema } from '../../schemas';
import { marked } from 'marked';
import Layout from '@layouts/Slug.astro';
import { Image } from 'astro:assets';
import { query } from '@queries/allPosts';

const pageSchema = postSchema.transform(
  ({ _updatedAt, _createdAt, ...rest }) => ({
    dateModified: _updatedAt,
    datePublished: _createdAt,
    ...rest
  })
);

type pathProps = z.infer<typeof postSchema>;
type pageProps = z.infer<typeof pageSchema>;

export const getStaticPaths = async () => {
  const paramsResponse = await fetch(import.meta.env.SANITY_API_URL, {
    method: 'POST',
    headers: {
      Authorization: `bearer ${import.meta.env.SANITY_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ ...query })
  });
  const paramsJson = await paramsResponse?.json();
  const { allPost } = paramsJson?.data;

  const paths = allPost.map(
    ({
      cover,
      slug,
      title,
      content,
      description,
      brand,
      category,
      links = [],
      price,
      acquired = [],
      tags = [],
      made = '',
      views = 0,
      likes = 0,
      _updatedAt: dateModified,
      _createdAt: datePublished
    }: pathProps) => ({
      params: {
        categories: category.slug.current,
        slug: slug.current
      },
      props: {
        cover,
        slug,
        title,
        content,
        description,
        brand,
        category,
        links,
        price,
        acquired,
        tags,
        made,
        views,
        likes,
        dateModified,
        datePublished
      }
    })
  );

  return paths;
};

// type Params = InferGetStaticParamsType<typeof getStaticPaths>;

// const { categories: category } = Astro.params as Params;

const {
  cover,
  slug,
  title,
  content,
  description,
  brand,
  category,
  links,
  price,
  acquired,
  tags,
  made,
  views,
  likes,
  dateModified,
  datePublished
} = Astro.props as pageProps;

const bodyContent = marked.parse(content);

let acquiredYear;
if (acquired?.length > 0) {
  acquiredYear = new Date(`${acquired[0].year}`)?.getFullYear();
}
---

<Layout
  title={title}
  description={description}
  acquired={acquired}
  price={price}
  category={category}
  made={made}
  tags={tags}
  dateModified={dateModified}
  datePublished={datePublished}
>
  <h1>{title}</h1>
  {
    !!acquiredYear && (
      <div class="place">
        {acquiredYear}&nbsp;{!!acquired[0].before && '前'}
        {`在${acquired[0].place}獲得`}
      </div>
    )
  }
  <Image class="cover" src={cover?.asset?.url} width={640} height={640} alt="" />
  {
    (!!brand || (!!links && links?.length > 0)) && (
      <div class="layoutMeta">
        {!!brand && (
          <div class="meta">
            <strong class="metaTitle">品牌</strong>
            <span class="metaName">{brand}</span>
          </div>
        )}
        {!!links && links?.length > 0 && (
          <div class="meta">
            {links.map(({ title, href }) => (
              <>
                <strong class="metaTitle">參考連結</strong>
                <a
                  href={href}
                  class="metaName lgspt-meta-reference-link"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {title}
                </a>
              </>
            ))}
          </div>
        )}
      </div>
    )
  }
  {(!!brand || (!!links && links?.length > 0)) && <hr class="divider" />}
  {!!content && <Fragment set:html={bodyContent} />}
</Layout>

<style lang="scss">
  h1 {
    margin-block: 0 0.8rem;
    color: var(--colorShade25);
    font-size: clamp(3rem, 1.2vw + 2.25rem, 3.4rem);
  }

  .place {
    margin-block-end: 1.6rem;
    font-size: 1.6rem;
  }

  .cover {
    display: block;
    max-width: 100%;
    height: auto;
    margin-block-end: 1.2rem;
    border-radius: 24px;

    @media screen and (min-width: 992px) {
      max-width: 384px;
    }
  }

  .layoutMeta {
    @media screen and (min-width: 992px) {
      display: grid;
      grid: auto / repeat(auto-fit, minmax(max-content, 144px));
      column-gap: 1.6rem;
    }
  }

  .meta {
    margin-block-end: 1.2rem;

    &Title {
      display: block;
      margin-block-end: 0.4rem;
      color: var(--colorShade64);
      font-size: 1.4rem;
      font-weight: normal;
    }

    &Name {
      display: inline-block;
      color: var(--colorShade40);
      font-size: 1.6rem;
    }
  }

  .divider {
    max-width: 384px;
    margin-block: 0 1.6rem;
    margin-inline: 0 auto;
    border-top: 0;
    border-bottom: 1px solid var(--colorShade88);
  }
</style>
